/**
 * CarePlanView Component Tests
 *
 * Tests the care plan display component with markdown rendering
 */

import { describe, it, expect, vi, beforeEach } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import userEvent from '@testing-library/user-event';
import { CarePlanView } from '@/components/CarePlanView';
import type { CarePlan } from '@/lib/domain/types';
import { toCarePlanId, toPatientId } from '@/lib/domain/types';

// Mock URL.createObjectURL and related functions
beforeEach(() => {
  global.URL.createObjectURL = vi.fn(() => 'blob:mock-url');
  global.URL.revokeObjectURL = vi.fn();

  // Mock createElement and appendChild for download
  const mockLink = {
    href: '',
    download: '',
    click: vi.fn(),
  };

  vi.spyOn(document, 'createElement').mockReturnValue(mockLink as any);
  vi.spyOn(document.body, 'appendChild').mockImplementation(() => mockLink as any);
  vi.spyOn(document.body, 'removeChild').mockImplementation(() => mockLink as any);
});

describe('CarePlanView', () => {
  const mockCarePlan: CarePlan = {
    id: toCarePlanId('careplan-1'),
    patientId: toPatientId('patient-1'),
    content: '# Care Plan\n\nThis is a test care plan.',
    generatedBy: 'Claude AI',
    createdAt: new Date('2024-01-15T10:30:00Z'),
  };

  it('displays care plan metadata', () => {
    render(<CarePlanView carePlan={mockCarePlan} />);

    expect(screen.getByText('Care Plan')).toBeInTheDocument();
    expect(screen.getByText(/Generated by Claude AI/)).toBeInTheDocument();
    expect(screen.getByText(/January 15, 2024/)).toBeInTheDocument();
  });

  it('renders markdown content correctly', () => {
    const carePlanWithMarkdown: CarePlan = {
      ...mockCarePlan,
      content: '# Main Heading\n\nThis is **bold** text.',
    };

    render(<CarePlanView carePlan={carePlanWithMarkdown} />);

    expect(screen.getByText('Main Heading')).toBeInTheDocument();
    expect(screen.getByText('bold')).toBeInTheDocument();
  });

  it('displays download button', () => {
    render(<CarePlanView carePlan={mockCarePlan} />);

    const downloadButton = screen.getByRole('button', { name: /Download/i });
    expect(downloadButton).toBeInTheDocument();
  });

  it('triggers download when download button is clicked', async () => {
    render(<CarePlanView carePlan={mockCarePlan} patientName="John Doe" />);

    const downloadButton = screen.getByRole('button', { name: /Download/i });
    await userEvent.click(downloadButton);

    expect(document.createElement).toHaveBeenCalledWith('a');
  });

  it('includes patient name in header when provided', () => {
    render(<CarePlanView carePlan={mockCarePlan} patientName="John Doe" />);

    // The patient name would be in the filename, not visible in the UI
    // So we just verify the component renders without error
    expect(screen.getByText('Care Plan')).toBeInTheDocument();
  });

  it('renders lists correctly', () => {
    const carePlanWithList: CarePlan = {
      ...mockCarePlan,
      content: '## Medications\n\n- Medication A\n- Medication B\n- Medication C',
    };

    render(<CarePlanView carePlan={carePlanWithList} />);

    expect(screen.getByText('Medications')).toBeInTheDocument();
    expect(screen.getByText('Medication A')).toBeInTheDocument();
    expect(screen.getByText('Medication B')).toBeInTheDocument();
    expect(screen.getByText('Medication C')).toBeInTheDocument();
  });

  it('renders code blocks with proper styling', () => {
    const carePlanWithCode: CarePlan = {
      ...mockCarePlan,
      content: 'Here is some `inline code` and:\n\n```\nfunction test() {\n  return true;\n}\n```',
    };

    render(<CarePlanView carePlan={carePlanWithCode} />);

    expect(screen.getByText('inline code')).toBeInTheDocument();
  });

  it('formats date and time correctly', () => {
    const specificDate = new Date('2024-03-20T14:45:00Z');
    const carePlan: CarePlan = {
      ...mockCarePlan,
      createdAt: specificDate,
    };

    render(<CarePlanView carePlan={carePlan} />);

    // Check for the month name (format is locale-dependent)
    expect(screen.getByText(/March/)).toBeInTheDocument();
    expect(screen.getByText(/2024/)).toBeInTheDocument();
  });

  it('renders multiple sections with proper spacing', () => {
    const complexCarePlan: CarePlan = {
      ...mockCarePlan,
      content: `# Care Plan

## Patient Background
Patient history and background information.

## Medication Regimen
Detailed medication schedule.

## Follow-up Instructions
Instructions for follow-up care.`,
    };

    render(<CarePlanView carePlan={complexCarePlan} />);

    expect(screen.getByText('Care Plan')).toBeInTheDocument();
    expect(screen.getByText('Patient Background')).toBeInTheDocument();
    expect(screen.getByText('Medication Regimen')).toBeInTheDocument();
    expect(screen.getByText('Follow-up Instructions')).toBeInTheDocument();
  });
});
