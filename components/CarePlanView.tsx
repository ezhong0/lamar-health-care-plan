/**
 * Care Plan View Component
 *
 * Displays generated care plan with markdown rendering and download functionality.
 * Linear-inspired design with clean typography and spacing.
 */

'use client';

import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import type { CarePlan } from '@/lib/domain/types';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';

interface CarePlanViewProps {
  carePlan: CarePlan;
  patientName?: string;
}

/**
 * Downloads the care plan content as a text file
 */
function downloadCarePlan(carePlan: CarePlan, patientName?: string) {
  const filename = `care-plan-${carePlan.id}-${new Date(carePlan.createdAt).toISOString().split('T')[0]}.txt`;
  const content = `Care Plan
${patientName ? `Patient: ${patientName}\n` : ''}Generated: ${new Date(carePlan.createdAt).toLocaleDateString()}
Generated By: ${carePlan.generatedBy}

${carePlan.content}`;

  const blob = new Blob([content], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

export function CarePlanView({ carePlan, patientName }: CarePlanViewProps) {
  const createdDate = new Date(carePlan.createdAt);
  const formattedDate = createdDate.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
  const formattedTime = createdDate.toLocaleTimeString('en-US', {
    hour: 'numeric',
    minute: '2-digit',
  });

  return (
    <div className="space-y-6">
      {/* Header with metadata */}
      <Card className="p-6">
        <div className="flex items-start justify-between">
          <div className="space-y-1">
            <h2 className="text-lg font-semibold text-neutral-900 dark:text-white">Care Plan</h2>
            <div className="flex items-center gap-4 text-sm text-neutral-600 dark:text-neutral-400">
              <div className="flex items-center gap-1.5">
                <svg
                  className="w-4 h-4"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                  />
                </svg>
                <span>
                  {formattedDate} at {formattedTime}
                </span>
              </div>
              <div className="flex items-center gap-1.5">
                <svg
                  className="w-4 h-4"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"
                  />
                </svg>
                <span>Generated by {carePlan.generatedBy}</span>
              </div>
            </div>
          </div>
          <Button
            variant="outline"
            size="sm"
            onClick={() => downloadCarePlan(carePlan, patientName)}
            className="flex items-center gap-2"
          >
            <svg
              className="w-4 h-4"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"
              />
            </svg>
            Download
          </Button>
        </div>
      </Card>

      {/* Care plan content */}
      <Card className="p-6">
        <div className="prose prose-neutral dark:prose-invert max-w-none">
          <ReactMarkdown
            remarkPlugins={[remarkGfm]}
            components={{
              // Customize heading styles to match Linear aesthetic
              h1: ({ children }) => (
                <h1 className="text-2xl font-semibold text-neutral-900 dark:text-white mb-4">{children}</h1>
              ),
              h2: ({ children }) => (
                <h2 className="text-xl font-semibold text-neutral-900 dark:text-white mt-8 mb-3">{children}</h2>
              ),
              h3: ({ children }) => (
                <h3 className="text-lg font-medium text-neutral-900 dark:text-white mt-6 mb-2">{children}</h3>
              ),
              // Clean paragraph spacing
              p: ({ children }) => <p className="text-neutral-700 dark:text-neutral-300 mb-4 leading-7">{children}</p>,
              // List styling
              ul: ({ children }) => <ul className="space-y-2 mb-4">{children}</ul>,
              ol: ({ children }) => <ol className="space-y-2 mb-4">{children}</ol>,
              li: ({ children }) => (
                <li className="text-neutral-700 dark:text-neutral-300 leading-7">{children}</li>
              ),
              // Code blocks
              code: ({ className, children }) => {
                const isInline = !className;
                return isInline ? (
                  <code className="bg-neutral-100 dark:bg-neutral-800 px-1.5 py-0.5 rounded text-sm font-mono text-neutral-900 dark:text-neutral-100">
                    {children}
                  </code>
                ) : (
                  <code className={`${className} block bg-neutral-100 dark:bg-neutral-800 p-4 rounded text-sm font-mono text-neutral-900 dark:text-neutral-100 overflow-x-auto`}>
                    {children}
                  </code>
                );
              },
              // Strong/bold text
              strong: ({ children }) => <strong className="font-semibold text-neutral-900 dark:text-white">{children}</strong>,
              // Links
              a: ({ href, children }) => (
                <a
                  href={href}
                  className="text-neutral-900 dark:text-white underline hover:text-neutral-600 dark:hover:text-neutral-300 transition-colors"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {children}
                </a>
              ),
              // Tables
              table: ({ children }) => (
                <div className="overflow-x-auto mb-4">
                  <table className="min-w-full border-collapse border border-neutral-200 dark:border-neutral-800">
                    {children}
                  </table>
                </div>
              ),
              th: ({ children }) => (
                <th className="border border-neutral-200 dark:border-neutral-800 bg-neutral-50 dark:bg-neutral-900 px-4 py-2 text-left font-semibold text-neutral-900 dark:text-white">
                  {children}
                </th>
              ),
              td: ({ children }) => (
                <td className="border border-neutral-200 dark:border-neutral-800 px-4 py-2 text-neutral-700 dark:text-neutral-300">
                  {children}
                </td>
              ),
              // Blockquotes
              blockquote: ({ children }) => (
                <blockquote className="border-l-4 border-neutral-300 dark:border-neutral-700 pl-4 italic text-neutral-600 dark:text-neutral-400 my-4">
                  {children}
                </blockquote>
              ),
              // Horizontal rule
              hr: () => <hr className="my-8 border-neutral-200 dark:border-neutral-800" />,
            }}
          >
            {carePlan.content}
          </ReactMarkdown>
        </div>
      </Card>
    </div>
  );
}
